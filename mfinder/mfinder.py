# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_mfinder', [dirname(__file__)])
        except ImportError:
            import _mfinder
            return _mfinder
        if fp is not None:
            try:
                _mod = imp.load_module('_mfinder', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _mfinder = swig_import_helper()
    del swig_import_helper
else:
    import _mfinder
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def get_members(*args):
  return _mfinder.get_members(*args)
get_members = _mfinder.get_members

def get_motif(*args):
  return _mfinder.get_motif(*args)
get_motif = _mfinder.get_motif
REAL_NET = _mfinder.REAL_NET
RAND_NET = _mfinder.RAND_NET

def subgraphs_interface(*args):
  return _mfinder.subgraphs_interface(*args)
subgraphs_interface = _mfinder.subgraphs_interface

def res_tbl_mem_free(*args):
  return _mfinder.res_tbl_mem_free(*args)
res_tbl_mem_free = _mfinder.res_tbl_mem_free
class IntArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mfinder.new_IntArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mfinder.delete_IntArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _mfinder.IntArray___getitem__(self, *args)
    def __setitem__(self, *args): return _mfinder.IntArray___setitem__(self, *args)
    def cast(self): return _mfinder.IntArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _mfinder.IntArray_frompointer
    if _newclass:frompointer = staticmethod(_mfinder.IntArray_frompointer)
IntArray_swigregister = _mfinder.IntArray_swigregister
IntArray_swigregister(IntArray)

def IntArray_frompointer(*args):
  return _mfinder.IntArray_frompointer(*args)
IntArray_frompointer = _mfinder.IntArray_frompointer

class Res_tbl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Res_tbl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Res_tbl, name)
    __repr__ = _swig_repr
    __swig_setmethods__["real"] = _mfinder.Res_tbl_real_set
    __swig_getmethods__["real"] = _mfinder.Res_tbl_real_get
    if _newclass:real = _swig_property(_mfinder.Res_tbl_real_get, _mfinder.Res_tbl_real_set)
    __swig_setmethods__["rand_arr"] = _mfinder.Res_tbl_rand_arr_set
    __swig_getmethods__["rand_arr"] = _mfinder.Res_tbl_rand_arr_get
    if _newclass:rand_arr = _swig_property(_mfinder.Res_tbl_rand_arr_get, _mfinder.Res_tbl_rand_arr_set)
    def __init__(self): 
        this = _mfinder.new_Res_tbl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mfinder.delete_Res_tbl
    __del__ = lambda self : None;
Res_tbl_swigregister = _mfinder.Res_tbl_swigregister
Res_tbl_swigregister(Res_tbl)

class Motif(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Motif, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Motif, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _mfinder.Motif_id_set
    __swig_getmethods__["id"] = _mfinder.Motif_id_get
    if _newclass:id = _swig_property(_mfinder.Motif_id_get, _mfinder.Motif_id_set)
    __swig_setmethods__["count"] = _mfinder.Motif_count_set
    __swig_getmethods__["count"] = _mfinder.Motif_count_get
    if _newclass:count = _swig_property(_mfinder.Motif_count_get, _mfinder.Motif_count_set)
    __swig_setmethods__["prob_count"] = _mfinder.Motif_prob_count_set
    __swig_getmethods__["prob_count"] = _mfinder.Motif_prob_count_get
    if _newclass:prob_count = _swig_property(_mfinder.Motif_prob_count_get, _mfinder.Motif_prob_count_set)
    __swig_setmethods__["conc"] = _mfinder.Motif_conc_set
    __swig_getmethods__["conc"] = _mfinder.Motif_conc_get
    if _newclass:conc = _swig_property(_mfinder.Motif_conc_get, _mfinder.Motif_conc_set)
    __swig_setmethods__["hits"] = _mfinder.Motif_hits_set
    __swig_getmethods__["hits"] = _mfinder.Motif_hits_get
    if _newclass:hits = _swig_property(_mfinder.Motif_hits_get, _mfinder.Motif_hits_set)
    __swig_setmethods__["members"] = _mfinder.Motif_members_set
    __swig_getmethods__["members"] = _mfinder.Motif_members_get
    if _newclass:members = _swig_property(_mfinder.Motif_members_get, _mfinder.Motif_members_set)
    __swig_setmethods__["all_members"] = _mfinder.Motif_all_members_set
    __swig_getmethods__["all_members"] = _mfinder.Motif_all_members_get
    if _newclass:all_members = _swig_property(_mfinder.Motif_all_members_get, _mfinder.Motif_all_members_set)
    __swig_setmethods__["numberOfSelfEdges"] = _mfinder.Motif_numberOfSelfEdges_set
    __swig_getmethods__["numberOfSelfEdges"] = _mfinder.Motif_numberOfSelfEdges_get
    if _newclass:numberOfSelfEdges = _swig_property(_mfinder.Motif_numberOfSelfEdges_get, _mfinder.Motif_numberOfSelfEdges_set)
    __swig_setmethods__["conv_grade"] = _mfinder.Motif_conv_grade_set
    __swig_getmethods__["conv_grade"] = _mfinder.Motif_conv_grade_get
    if _newclass:conv_grade = _swig_property(_mfinder.Motif_conv_grade_get, _mfinder.Motif_conv_grade_set)
    def __init__(self): 
        this = _mfinder.new_Motif()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mfinder.delete_Motif
    __del__ = lambda self : None;
Motif_swigregister = _mfinder.Motif_swigregister
Motif_swigregister(Motif)

class Member(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Member, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Member, name)
    __repr__ = _swig_repr
    __swig_setmethods__["node"] = _mfinder.Member_node_set
    __swig_getmethods__["node"] = _mfinder.Member_node_get
    if _newclass:node = _swig_property(_mfinder.Member_node_get, _mfinder.Member_node_set)
    __swig_setmethods__["role"] = _mfinder.Member_role_set
    __swig_getmethods__["role"] = _mfinder.Member_role_get
    if _newclass:role = _swig_property(_mfinder.Member_role_get, _mfinder.Member_role_set)
    def __init__(self): 
        this = _mfinder.new_Member()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mfinder.delete_Member
    __del__ = lambda self : None;
Member_swigregister = _mfinder.Member_swigregister
Member_swigregister(Member)

class list64(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, list64, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, list64, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _mfinder.list64_size_set
    __swig_getmethods__["size"] = _mfinder.list64_size_get
    if _newclass:size = _swig_property(_mfinder.list64_size_get, _mfinder.list64_size_set)
    __swig_setmethods__["l"] = _mfinder.list64_l_set
    __swig_getmethods__["l"] = _mfinder.list64_l_get
    if _newclass:l = _swig_property(_mfinder.list64_l_get, _mfinder.list64_l_set)
    def __init__(self): 
        this = _mfinder.new_list64()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mfinder.delete_list64
    __del__ = lambda self : None;
list64_swigregister = _mfinder.list64_swigregister
list64_swigregister(list64)

class list64_item(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, list64_item, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, list64_item, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val"] = _mfinder.list64_item_val_set
    __swig_getmethods__["val"] = _mfinder.list64_item_val_get
    if _newclass:val = _swig_property(_mfinder.list64_item_val_get, _mfinder.list64_item_val_set)
    __swig_setmethods__["p"] = _mfinder.list64_item_p_set
    __swig_getmethods__["p"] = _mfinder.list64_item_p_get
    if _newclass:p = _swig_property(_mfinder.list64_item_p_get, _mfinder.list64_item_p_set)
    __swig_setmethods__["next"] = _mfinder.list64_item_next_set
    __swig_getmethods__["next"] = _mfinder.list64_item_next_get
    if _newclass:next = _swig_property(_mfinder.list64_item_next_get, _mfinder.list64_item_next_set)
    def __init__(self): 
        this = _mfinder.new_list64_item()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mfinder.delete_list64_item
    __del__ = lambda self : None;
list64_item_swigregister = _mfinder.list64_item_swigregister
list64_item_swigregister(list64_item)

class list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _mfinder.list_size_set
    __swig_getmethods__["size"] = _mfinder.list_size_get
    if _newclass:size = _swig_property(_mfinder.list_size_get, _mfinder.list_size_set)
    __swig_setmethods__["l"] = _mfinder.list_l_set
    __swig_getmethods__["l"] = _mfinder.list_l_get
    if _newclass:l = _swig_property(_mfinder.list_l_get, _mfinder.list_l_set)
    def __init__(self): 
        this = _mfinder.new_list()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mfinder.delete_list
    __del__ = lambda self : None;
list_swigregister = _mfinder.list_swigregister
list_swigregister(list)

class list_item(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, list_item, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, list_item, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val"] = _mfinder.list_item_val_set
    __swig_getmethods__["val"] = _mfinder.list_item_val_get
    if _newclass:val = _swig_property(_mfinder.list_item_val_get, _mfinder.list_item_val_set)
    __swig_setmethods__["p"] = _mfinder.list_item_p_set
    __swig_getmethods__["p"] = _mfinder.list_item_p_get
    if _newclass:p = _swig_property(_mfinder.list_item_p_get, _mfinder.list_item_p_set)
    __swig_setmethods__["next"] = _mfinder.list_item_next_set
    __swig_getmethods__["next"] = _mfinder.list_item_next_get
    if _newclass:next = _swig_property(_mfinder.list_item_next_get, _mfinder.list_item_next_set)
    def __init__(self): 
        this = _mfinder.new_list_item()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mfinder.delete_list_item
    __del__ = lambda self : None;
list_item_swigregister = _mfinder.list_item_swigregister
list_item_swigregister(list_item)



